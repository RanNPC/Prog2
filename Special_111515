// Special -- Parse tree node strategy for printing special forms

using System;

namespace Tree
{
    // There are several different approaches for how to implement the Special
    // hierarchy.  We'll discuss some of them in class.  The easiest solution
    // is to not add any fields and to use empty constructors.

    abstract public class Special
    {
        public abstract void print(Node t, int n, bool p);

        public virtual /*override*/ Node eval (Tree.Cons val, Tree.Environment env) //change back to Node
        {
           // form.eval(this, env); //FIXME once initiated special class
            return Nil.getInstance();    //special form has 2, regular has 1
     	}

         public Node otherbegin(Tree.Cons exp, Tree.Environment env)
         {
             while(exp.getCdr() != Nil.getInstance())
             {
                 exp.getCdr().getCar().eval(env);
                 exp = (Tree.Cons) exp.getCdr();
             }
             return exp.getCar().eval(env);
         }
    }


}

